# This is a GitHub Actions workflow to CROSS-COMPILE the quickbms project for ARM64.
# This method is significantly faster than emulation.
name: Cross-Compile for ARM64

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  cross-compile-arm64:
    name: Cross-Compile on Ubuntu (x86_64 -> arm64)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up cross-compilation environment
        run: |
          # 1. Add the arm64 architecture so we can install arm64 libraries
          sudo dpkg --add-architecture arm64
          sudo apt-get update
          
          # 2. Install the build tools for the HOST (x86_64)
          # We need clang to act as our cross-compiler.
          sudo apt-get install -y \
            build-essential \
            clang-14 llvm-14 lld-14

          # 3. Install the required libraries for the TARGET (arm64)
          # The ':arm64' suffix tells apt to install the arm64 version of these libraries.
          sudo apt-get install -y \
            zlib1g-dev:arm64 \
            liblzo2-dev:arm64 \
            libssl-dev:arm64

      - name: Build with Clang cross-compiler
        run: |
          echo "Starting QuickBMS cross-compilation..."
          
          # 4. Invoke make with variables pointing to the cross-compiler.
          # We tell Clang to target 'aarch64-linux-gnu' (the official name for arm64).
          # Clang is smart enough to automatically find the correct arm64 libraries we installed.
          # The --jobs flag with `nproc` uses all available CPU cores.
          make rebuild --jobs=$(nproc) \
            CC="clang-14 --target=aarch64-linux-gnu" \
            CXX="clang++-14 --target=aarch64-linux-gnu"
          
          echo "Build finished."

      - name: Verify binary architecture
        run: |
          # The 'file' command confirms the binary is for the correct architecture.
          # The output should contain "ARM aarch64".
          file src/quickbms

      - name: Prepare and Upload Artifact
        run: |
          mkdir -p artifacts
          cp src/quickbms artifacts/quickbms_linux_arm64
        
      - name: Upload arm64 binary as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: quickbms-linux-arm64
          path: artifacts/

name: Build ARM64

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  # Cross-compilation approach
  build-arm64-cross:
    runs-on: ubuntu-22.04  # Use 22.04 for better ARM64 cross-compilation support
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up ARM64 cross-compilation environment
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          zlib1g-dev \
          liblzo2-dev \
          libssl-dev \
          unicode \
          clang \
          llvm \
          lld \
          lldb \
          gcc-aarch64-linux-gnu \
          g++-aarch64-linux-gnu \
          libc6-dev-arm64-cross
    
    - name: Configure cross-compilation
      run: |
        echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
        echo "CXX=aarch64-linux-gnu-g++" >> $GITHUB_ENV
        echo "AR=aarch64-linux-gnu-ar" >> $GITHUB_ENV
        echo "STRIP=aarch64-linux-gnu-strip" >> $GITHUB_ENV
        echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig" >> $GITHUB_ENV
    
    - name: Clean previous builds
      run: make clean
    
    - name: Build for ARM64
      run: |
        make --jobs $(nproc)
    
    - name: Verify ARM64 binary
      run: |
        file bin/quickbms64 || file bin/quickbms || echo "Binary not found in expected location"
        find . -name "quickbms*" -type f -executable
    
    - name: Create release artifacts
      run: |
        mkdir -p artifacts/arm64
        # Copy the built binary (adjust path based on your build output)
        if [ -f bin/quickbms64 ]; then
          cp bin/quickbms64 artifacts/arm64/quickbms64-arm64
        elif [ -f bin/quickbms ]; then
          cp bin/quickbms artifacts/arm64/quickbms-arm64
        fi
        # Strip the binary to reduce size
        if [ -f artifacts/arm64/quickbms64-arm64 ]; then
          $STRIP artifacts/arm64/quickbms64-arm64
        elif [ -f artifacts/arm64/quickbms-arm64 ]; then
          $STRIP artifacts/arm64/quickbms-arm64
        fi
    
    - name: Upload ARM64 artifacts
      uses: actions/upload-artifact@v4
      with:
        name: quickbms-arm64-cross
        path: artifacts/arm64/
        retention-days: 30

  # Docker emulation approach - more reliable for ARM64
  build-arm64-docker:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build ARM64 using Docker
      run: |
        docker run --rm -v $PWD:/workspace -w /workspace \
          --platform linux/arm64 \
          ubuntu:22.04 \
          bash -c "
            apt-get update && 
            apt-get install -y \
              build-essential \
              zlib1g-dev \
              liblzo2-dev \
              libssl-dev \
              unicode \
              clang \
              llvm \
              lld \
              lldb && 
            make clean && 
            make --jobs \$(nproc)
          "
    
    - name: Upload Docker ARM64 artifacts
      uses: actions/upload-artifact@v4
      with:
        name: quickbms-arm64-docker
        path: bin/
        retention-days: 30

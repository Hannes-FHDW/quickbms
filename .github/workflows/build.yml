# This is a GitHub Actions workflow to CROSS-COMPILE the quickbms project for ARM64.
# This method is significantly faster than emulation because the compiler runs natively.
name: Cross-Compile for ARM64

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  cross-compile-arm64:
    name: Cross-Compile on Ubuntu (x86_64 -> arm64)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up cross-compilation environment
        run: |
          # Enable the package manager to find and install packages for the arm64 architecture.
          sudo dpkg --add-architecture arm64
          sudo apt-get update
          
          # Install the host build tools (clang/llvm will be our cross-compiler).
          sudo apt-get install -y \
            build-essential \
            clang-14 llvm-14 lld-14

          # Install the TARGET architecture's development libraries.
          # The ':arm64' suffix is crucial. It tells apt to fetch the arm64 versions.
          # These are readily available in Ubuntu's standard package repositories.
          sudo apt-get install -y \
            zlib1g-dev:arm64 \
            liblzo2-dev:arm64 \
            libssl-dev:arm64

      - name: Build with Clang cross-compiler
        run: |
          echo "Starting QuickBMS cross-compilation..."
          
          # We override the Makefile's default compiler (CC/CXX) with our clang cross-compiler.
          # Clang's '--target' flag makes it generate arm64 code and automatically find the
          # arm64 libraries we just installed.
          # The --jobs flag with `nproc` uses all available CPU cores for a faster build.
          make rebuild --jobs=$(nproc) \
            CC="clang-14 --target=aarch64-linux-gnu" \
            CXX="clang++-14 --target=aarch64-linux-gnu"
          
          echo "Build finished successfully."

      - name: Verify binary architecture
        run: |
          # This is a critical verification step.
          # The 'file' command inspects the compiled binary.
          echo "Verifying the architecture of the compiled binary..."
          file src/quickbms
          
          # The command should output a line containing "ELF 64-bit LSB executable, ARM aarch64".
          # We use 'grep' to explicitly check for this and fail the job if it's not found.
          file src/quickbms | grep "ARM aarch64"

      - name: Prepare and Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: quickbms-linux-arm64
          path: src/quickbms
